var shown_entries = 7; var tooltip_origin = "wowhead"; var bar_colors = ["#7cb5ec", "#d9d9df", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"]; var font_color = "#f8f9fa"; var grey_color = "#828282"; var background_color = "#343a40"; var font_size = "1.1rem"; var dev_mode = !1; var empty_chart = {
  chart: { type: "bar", backgroundColor: background_color, style: { fontFamily: "-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"" } }, colors: bar_colors, legend: { align: "right", backgroundColor: background_color, borderColor: grey_color, borderWidth: 1, floating: !1, itemMarginBottom: 3, itemMarginTop: 3, layout: 'horizontal', reversed: !0, shadow: !1, verticalAlign: "bottom", x: 0, y: 0, itemStyle: { color: font_color, }, itemHoverStyle: { color: font_color, } }, plotOptions: { bar: { dataLabels: { enabled: !1, }, }, series: { stacking: "normal", borderColor: background_color, events: { legendItemClick: function () { return !1 } }, style: { textOutline: !1, fontSize: font_size, } } }, series: [{ color: font_color, data: [1, 1, 3, 1, 3], name: "b main", showInLegend: !1 }, { color: background_color, data: [0, 0, 0, 1, 0], name: "b's emptiness", showInLegend: !1 }, { color: font_color, data: [0, 0, 0, 1, 0], name: "b's finishing touch", showInLegend: !1 }], title: { text: "Loading...", useHTML: !0, style: { color: font_color, fontSize: font_size } }, subtitle: { text: "...from <a href=\"https://bloodmallet.com\">bloodmallet.com</a>", useHTML: !0, style: { color: font_color, fontSize: font_size } }, tooltip: {
    formatter: function () {
      let s = '<div style="margin: -4px -6px -11px -7px; padding: 3px 3px 6px 3px; background-color:'; s += background_color; s += '"><div style=\"margin-left: 9px; margin-right: 9px; margin-bottom: 6px; font-weight: 700;\">'; s += this.x; s += '</div>'; let cumulative_amount = 0; for (var i = this.points.length - 1; i >= 0; i--) { cumulative_amount += this.points[i].y; if (this.points[i].y !== 0) { s += '<div><span style=\"margin-left: 9px; border-left: 9px solid ' + this.points[i].series.color + ';' + ' padding-left: 4px;\">' + this.points[i].series.name + '</span>:&nbsp;&nbsp;' + Intl.NumberFormat().format(cumulative_amount) + "</div>" } }
      s += '</div>'; return s
    }, headerFormat: "<b>{point.x}</b>", shared: !0, backgroundColor: background_color, borderColor: grey_color, style: { color: font_color, fontSize: font_size, }, useHTML: !0, positioner: function (boxWidth, boxHeight, point) { return { x: point.plotX, y: point.plotY } }
  }, xAxis: { categories: ["", "", "", "", "",], labels: { useHTML: !0, style: { color: font_color, fontSize: font_size, } }, gridLineWidth: 0, gridLineColor: grey_color, lineColor: grey_color, tickColor: grey_color }, yAxis: { labels: { style: { color: grey_color }, }, min: 0, stackLabels: { enabled: !0, formatter: function () { return Intl.NumberFormat().format(this.total) }, style: { color: font_color, textOutline: !1, fontSize: font_size, fontWeight: "normal" } }, title: { text: "\u0394 Damage per second", style: { color: grey_color } }, gridLineWidth: 1, gridLineColor: grey_color }
}; var path_to_data = "https://bloodmallet.com/json/"; var bloodmallet_charts = { "bloodmallet_trinkets_patchwerk": !1, "bloodmallet_trinkets_hecticaddcleave": !1, "bloodmallet_azerite_items_chest_patchwerk": !1, "bloodmallet_azerite_items_chest_hecticaddcleave": !1, "bloodmallet_azerite_items_head_patchwerk": !1, "bloodmallet_azerite_items_head_hecticaddcleave": !1, "bloodmallet_azerite_items_shoulders_patchwerk": !1, "bloodmallet_azerite_items_shoulders_hecticaddcleave": !1, "bloodmallet_azerite_traits_itemlevel_patchwerk": !1, "bloodmallet_azerite_traits_itemlevel_hecticaddcleave": !1, "bloodmallet_azerite_traits_stacking_patchwerk": !1, "bloodmallet_azerite_traits_stacking_hecticaddcleave": !1, }; var loaded_data = {}; document.addEventListener("DOMContentLoaded", function () {
  if (dev_mode) { console.log("addEventListener to DOMContentLoaded") }
  for (const key in bloodmallet_charts) {
    let html_element = document.getElementById(key); if (html_element) {
      if (html_element.getAttribute("data-background-color")) { background_color = html_element.getAttribute("data-background-color") }
      if (html_element.getAttribute("data-font-color")) { font_color = html_element.getAttribute("data-font-color") }
      if (html_element.getAttribute("data-tooltip-engine")) { tooltip_origin = html_element.getAttribute("data-tooltip-engine") }
      let requirements = !0; if (!html_element.getAttribute("data-wow-class")) {
        console.log("Required 'data-wow-class' attribute wasn't found in " + key + ".")
        requirements = !1
      }
      let wow_class = html_element.getAttribute("data-wow-class"); if (!html_element.getAttribute("data-wow-spec")) {
        console.log("Required 'data-wow-spec' attribute wasn't found in " + key + ".")
        requirements = !1
      }
      let wow_spec = html_element.getAttribute("data-wow-spec"); let fight_style = key.split("_")[key.split("_").length - 1]; let data_type = key.replace("bloodmallet_", ""); data_type = data_type.replace("_" + fight_style, ""); try { bloodmallet_charts[key] = Highcharts.chart(key, empty_chart) } catch (error) { console.log("When trying to create a Highcharts Chart the following Error occured. Did you include the necessary Highcharts scripts?"); console.log(error); return }
      update_chart_style(bloodmallet_charts[key]); if (requirements) { load_data(data_type, wow_class, wow_spec, fight_style) } else { requirements_error(key) }
    }
  }
  setTimeout(update_charts, 2 * 1000)
}); function load_data(data_type, wow_class, wow_spec, fight_style) {
  if (dev_mode) { console.log("load_data") }
  let data_group = data_type; if (data_group.indexOf("azerite") > -1) { data_group = "azerite_traits" }
  let data_name = wow_class; data_name += "_" + wow_spec; if (data_type.indexOf("azerite_items") > -1) { data_name += data_type.replace("azerite_items", "") }
  data_name += "_" + fight_style; data_name += ".json"; fetch(path_to_data + data_group + "/" + data_name).then(function (response) {
    if (response.status !== 200) { console.log('Problem occured when fetching data from bloodmallet.com. Status Code: ' + response.status); return !1 }
    response.json().then(function (json) { loaded_data["bloodmallet_" + data_type + "_" + fight_style] = json })
  }).catch(function (err) { console.log('Fetching data from bloodmallet.com encountered an error', err) })
}
function update_charts() {
  if (dev_mode) { console.log("update_charts") }
  for (const key in loaded_data) {
    if (loaded_data.hasOwnProperty(key)) {
      const data = loaded_data[key]; let chart = bloodmallet_charts[key]; let html_element = document.getElementById(key); if (key.indexOf("azerite_traits_stacking") > -1) { var dps_ordered_keys = data.sorted_data_keys_2.slice(0, shown_entries); var baseline_dps = data.data.baseline[data.simulated_steps[0]] } else { var dps_ordered_keys = data.sorted_data_keys.slice(0, shown_entries); var baseline_dps = data.data.baseline[data.simulated_steps[data.simulated_steps.length - 1]] }
      if (dev_mode) { console.log(dps_ordered_keys); console.log("Baseline dps: " + baseline_dps) }
      chart.setTitle({ text: data.title }, { text: data.subtitle }, !1); while (chart.series[0]) { chart.series[0].remove(!1) }
      category_list = []; for (let dps_key of dps_ordered_keys) { category_list.push(get_category_name(dps_key, data)) }
      if (dev_mode) { console.log(category_list) }
      chart.update({ xAxis: { categories: category_list } }, !1); if (key.indexOf("azerite_traits_stacking") > -1) { let base_ilevel = data.simulated_steps[0].replace("1_", ""); var simulated_steps = []; simulated_steps.push("3_" + base_ilevel); simulated_steps.push("2_" + base_ilevel); simulated_steps.push("1_" + base_ilevel) } else { var simulated_steps = data.simulated_steps }
      if (dev_mode) { console.log("simulated_steps: " + simulated_steps) }
      for (let itemlevel_position in simulated_steps) {
        let itemlevel = simulated_steps[itemlevel_position]; var dps_array = []; for (let dps_key of dps_ordered_keys) { let dps_key_values = data.data[dps_key]; if (Number(dps_key_values[itemlevel]) > 0) { if (itemlevel_position == simulated_steps.length - 1) { if (itemlevel in dps_key_values) { dps_array.push(dps_key_values[itemlevel] - baseline_dps) } else { dps_array.push(0) } } else { if (dps_key_values[simulated_steps[String(Number(itemlevel_position) + 1)]] == 0 || !(simulated_steps[String(Number(itemlevel_position) + 1)] in dps_key_values)) { dps_array.push(dps_key_values[itemlevel] - baseline_dps) } else { dps_array.push(dps_key_values[itemlevel] - dps_key_values[simulated_steps[String(Number(itemlevel_position) + 1)]]) } } } else { if (itemlevel in dps_key_values) { dps_array.push(dps_key_values[itemlevel]) } else { dps_array.push(0) } } }
        chart.addSeries({ data: dps_array, name: itemlevel, showInLegend: !0 }, !1)
      }
      html_element.style.height = 200 + dps_ordered_keys.length * 30 + "px"; chart.setSize(html_element.style.width, html_element.style.height); chart.redraw()
    }
  }
}
function get_category_name(key, data) {
  if (dev_mode) { console.log("get_category_name"); console.log(key); console.log(data) }
  if (tooltip_origin != "wowhead" && tooltip_origin != "wowdb") { return key }
  if (tooltip_origin == "wowhead") {
    let link = "<a href=\"https://www.wowhead.com/"; try { let item_id = data.item_ids[key]; link += "item=" + item_id } catch (error) { if (dev_mode) { console.log(error); console.log("We're probably looking at a spell.") } }
    if (link.indexOf("item") > -1) {
      if (data.hasOwnProperty("class_id") && data.hasOwnProperty("used_azerite_traits_per_item")) { link += "/azerite-powers="; link += data.class_id; for (const trait of data.used_azerite_traits_per_item[key]) { link += ":" + trait.id } }
      let ilvl = data.simulated_steps[data.simulated_steps.length - 1]; if (typeof ilvl === 'string') { if (ilvl.indexOf("_") > -1) { ilvl = ilvl.split("_")[1] } }
      link += "&ilvl=" + ilvl
    }
    try { let spell_id = data.spell_ids[key]; link += "spell=" + spell_id } catch (error) { if (dev_mode) { console.log(error); console.log("We're probably looking at an item.") } }
    link += "\">" + key + "</a>"; return link
  }
  if (tooltip_origin == "wowdb") {
    let link = "<a href=\"http://www.wowdb.com/"; try { let item_id = data.item_ids[key]; link += "items/" + item_id } catch (error) { if (dev_mode) { console.log(error); console.log("We're probably looking at a spell.") } }
    if (link.indexOf("items") > -1) {
      let ilvl = data.simulated_steps[data.simulated_steps.length - 1]; if (ilvl.indexOf("_") > -1) { ilvl = ilvl.split("_")[1] }
      link += "?itemLevel=" + ilvl
    }
    try { let spell_id = data.spell_ids[key]; link += "spells/" + spell_id } catch (error) { if (dev_mode) { console.log(error); console.log("We're probably looking at an item.") } }
    link += "\">" + key + "</a>"; return link
  }
}
function requirements_error(id) { chart = bloodmallet_charts[id]; chart.update({ title: { text: "Error in chart setup" }, subtitle: { text: "Missing 'data-wow-class' or 'data-wow-spec'. <a href=\"https://bloodmallet.com\">bloodmallet.com</a>" } }) }
function update_chart_style(chart) {
  chart.update({
    chart: { backgroundColor: background_color }, legend: { backgroundColor: background_color, itemStyle: { color: font_color, }, itemHoverStyle: { color: font_color, } }, title: { style: { color: font_color, } }, subtitle: { style: { color: font_color, } }, tooltip: {
      formatter: function () {
        let s = '<div style="margin: -4px -6px -11px -7px; padding: 3px 3px 6px 3px; background-color:'; s += background_color; s += '"><div style=\"margin-left: 9px; margin-right: 9px; margin-bottom: 6px; font-weight: 700;\">'; s += this.x; s += '</div>'; let cumulative_amount = 0; for (var i = this.points.length - 1; i >= 0; i--) { cumulative_amount += this.points[i].y; if (this.points[i].y !== 0) { s += '<div><span style=\"margin-left: 9px; border-left: 9px solid ' + this.points[i].series.color + ';' + ' padding-left: 4px;\">' + this.points[i].series.name + '</span>:&nbsp;&nbsp;' + Intl.NumberFormat().format(cumulative_amount) + "</div>" } }
        s += '</div>'; return s
      }, backgroundColor: background_color, borderColor: grey_color, style: { color: font_color, fontSize: font_size, },
    }, yAxis: { stackLabels: { style: { color: font_color, } } }
  })
}
